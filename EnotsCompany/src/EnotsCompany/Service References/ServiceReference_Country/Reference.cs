//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference_Country
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Country", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.DAL")]
    public partial class Country : object
    {
        
        private string CommonNameField;
        
        private string CountryCodeField;
        
        private int CountryIdField;
        
        private string StatusCountryField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CommonName
        {
            get
            {
                return this.CommonNameField;
            }
            set
            {
                this.CommonNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryCode
        {
            get
            {
                return this.CountryCodeField;
            }
            set
            {
                this.CountryCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountryId
        {
            get
            {
                return this.CountryIdField;
            }
            set
            {
                this.CountryIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusCountry
        {
            get
            {
                return this.StatusCountryField;
            }
            set
            {
                this.StatusCountryField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyFaultException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.My_Excepti" +
        "on")]
    public partial class MyFaultException : object
    {
        
        private string errorCodeField;
        
        private string messageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string errorCode
        {
            get
            {
                return this.errorCodeField;
            }
            set
            {
                this.errorCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message
        {
            get
            {
                return this.messageField;
            }
            set
            {
                this.messageField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference_Country.ICountryService")]
    public interface ICountryService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountryService/getAllCountry", ReplyAction="http://tempuri.org/ICountryService/getAllCountryResponse")]
        System.Threading.Tasks.Task<ServiceReference_Country.Country[]> getAllCountryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountryService/findCountrybyId", ReplyAction="http://tempuri.org/ICountryService/findCountrybyIdResponse")]
        System.Threading.Tasks.Task<ServiceReference_Country.Country> findCountrybyIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountryService/findCountrybyCode", ReplyAction="http://tempuri.org/ICountryService/findCountrybyCodeResponse")]
        System.Threading.Tasks.Task<ServiceReference_Country.Country> findCountrybyCodeAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountryService/findCountrybyName", ReplyAction="http://tempuri.org/ICountryService/findCountrybyNameResponse")]
        System.Threading.Tasks.Task<ServiceReference_Country.Country[]> findCountrybyNameAsync(string nameCountry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountryService/createCountry", ReplyAction="http://tempuri.org/ICountryService/createCountryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference_Country.MyFaultException), Action="http://tempuri.org/ICountryService/createCountryMyFaultExceptionFault", Name="MyFaultException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.My_Excepti" +
            "on")]
        System.Threading.Tasks.Task<bool> createCountryAsync(ServiceReference_Country.Country c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountryService/updateCountry", ReplyAction="http://tempuri.org/ICountryService/updateCountryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference_Country.MyFaultException), Action="http://tempuri.org/ICountryService/updateCountryMyFaultExceptionFault", Name="MyFaultException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.My_Excepti" +
            "on")]
        System.Threading.Tasks.Task<bool> updateCountryAsync(ServiceReference_Country.Country c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountryService/deleteCountry", ReplyAction="http://tempuri.org/ICountryService/deleteCountryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference_Country.MyFaultException), Action="http://tempuri.org/ICountryService/deleteCountryMyFaultExceptionFault", Name="MyFaultException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.My_Excepti" +
            "on")]
        System.Threading.Tasks.Task<bool> deleteCountryAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public interface ICountryServiceChannel : ServiceReference_Country.ICountryService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public partial class CountryServiceClient : System.ServiceModel.ClientBase<ServiceReference_Country.ICountryService>, ServiceReference_Country.ICountryService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CountryServiceClient() : 
                base(CountryServiceClient.GetDefaultBinding(), CountryServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ICountryService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CountryServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(CountryServiceClient.GetBindingForEndpoint(endpointConfiguration), CountryServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CountryServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CountryServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CountryServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CountryServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CountryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference_Country.Country[]> getAllCountryAsync()
        {
            return base.Channel.getAllCountryAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReference_Country.Country> findCountrybyIdAsync(int id)
        {
            return base.Channel.findCountrybyIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<ServiceReference_Country.Country> findCountrybyCodeAsync(string code)
        {
            return base.Channel.findCountrybyCodeAsync(code);
        }
        
        public System.Threading.Tasks.Task<ServiceReference_Country.Country[]> findCountrybyNameAsync(string nameCountry)
        {
            return base.Channel.findCountrybyNameAsync(nameCountry);
        }
        
        public System.Threading.Tasks.Task<bool> createCountryAsync(ServiceReference_Country.Country c)
        {
            return base.Channel.createCountryAsync(c);
        }
        
        public System.Threading.Tasks.Task<bool> updateCountryAsync(ServiceReference_Country.Country c)
        {
            return base.Channel.updateCountryAsync(c);
        }
        
        public System.Threading.Tasks.Task<bool> deleteCountryAsync(int id)
        {
            return base.Channel.deleteCountryAsync(id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICountryService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICountryService))
            {
                return new System.ServiceModel.EndpointAddress("http://10.107.14.95/IISHosting/EnotsCompany/CountryService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CountryServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ICountryService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CountryServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ICountryService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ICountryService,
        }
    }
}
