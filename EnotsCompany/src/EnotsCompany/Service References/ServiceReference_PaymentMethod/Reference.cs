//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference_PaymentMethod
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaymentMethod", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.DAL")]
    public partial class PaymentMethod : object
    {
        
        private string NameField;
        
        private int PaymentMethodIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PaymentMethodId
        {
            get
            {
                return this.PaymentMethodIdField;
            }
            set
            {
                this.PaymentMethodIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyFaultException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.My_Excepti" +
        "on")]
    public partial class MyFaultException : object
    {
        
        private string errorCodeField;
        
        private string messageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string errorCode
        {
            get
            {
                return this.errorCodeField;
            }
            set
            {
                this.errorCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message
        {
            get
            {
                return this.messageField;
            }
            set
            {
                this.messageField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference_PaymentMethod.IPaymentMethodService")]
    public interface IPaymentMethodService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentMethodService/getAllPaymentMethod", ReplyAction="http://tempuri.org/IPaymentMethodService/getAllPaymentMethodResponse")]
        System.Threading.Tasks.Task<ServiceReference_PaymentMethod.PaymentMethod[]> getAllPaymentMethodAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentMethodService/findPaymentMethodByName", ReplyAction="http://tempuri.org/IPaymentMethodService/findPaymentMethodByNameResponse")]
        System.Threading.Tasks.Task<ServiceReference_PaymentMethod.PaymentMethod[]> findPaymentMethodByNameAsync(string payName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentMethodService/findPaymentMethodById", ReplyAction="http://tempuri.org/IPaymentMethodService/findPaymentMethodByIdResponse")]
        System.Threading.Tasks.Task<ServiceReference_PaymentMethod.PaymentMethod> findPaymentMethodByIdAsync(int payId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentMethodService/createPaymentMethod", ReplyAction="http://tempuri.org/IPaymentMethodService/createPaymentMethodResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference_PaymentMethod.MyFaultException), Action="http://tempuri.org/IPaymentMethodService/createPaymentMethodMyFaultExceptionFault" +
            "", Name="MyFaultException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.My_Excepti" +
            "on")]
        System.Threading.Tasks.Task<bool> createPaymentMethodAsync(ServiceReference_PaymentMethod.PaymentMethod pay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentMethodService/updatePaymentMethod", ReplyAction="http://tempuri.org/IPaymentMethodService/updatePaymentMethodResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference_PaymentMethod.MyFaultException), Action="http://tempuri.org/IPaymentMethodService/updatePaymentMethodMyFaultExceptionFault" +
            "", Name="MyFaultException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.My_Excepti" +
            "on")]
        System.Threading.Tasks.Task<bool> updatePaymentMethodAsync(ServiceReference_PaymentMethod.PaymentMethod pay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentMethodService/deletePaymentMethod", ReplyAction="http://tempuri.org/IPaymentMethodService/deletePaymentMethodResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference_PaymentMethod.MyFaultException), Action="http://tempuri.org/IPaymentMethodService/deletePaymentMethodMyFaultExceptionFault" +
            "", Name="MyFaultException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.My_Excepti" +
            "on")]
        System.Threading.Tasks.Task<bool> deletePaymentMethodAsync(int payId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public interface IPaymentMethodServiceChannel : ServiceReference_PaymentMethod.IPaymentMethodService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public partial class PaymentMethodServiceClient : System.ServiceModel.ClientBase<ServiceReference_PaymentMethod.IPaymentMethodService>, ServiceReference_PaymentMethod.IPaymentMethodService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PaymentMethodServiceClient() : 
                base(PaymentMethodServiceClient.GetDefaultBinding(), PaymentMethodServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IPaymentMethodService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PaymentMethodServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(PaymentMethodServiceClient.GetBindingForEndpoint(endpointConfiguration), PaymentMethodServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PaymentMethodServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PaymentMethodServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PaymentMethodServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PaymentMethodServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PaymentMethodServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference_PaymentMethod.PaymentMethod[]> getAllPaymentMethodAsync()
        {
            return base.Channel.getAllPaymentMethodAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReference_PaymentMethod.PaymentMethod[]> findPaymentMethodByNameAsync(string payName)
        {
            return base.Channel.findPaymentMethodByNameAsync(payName);
        }
        
        public System.Threading.Tasks.Task<ServiceReference_PaymentMethod.PaymentMethod> findPaymentMethodByIdAsync(int payId)
        {
            return base.Channel.findPaymentMethodByIdAsync(payId);
        }
        
        public System.Threading.Tasks.Task<bool> createPaymentMethodAsync(ServiceReference_PaymentMethod.PaymentMethod pay)
        {
            return base.Channel.createPaymentMethodAsync(pay);
        }
        
        public System.Threading.Tasks.Task<bool> updatePaymentMethodAsync(ServiceReference_PaymentMethod.PaymentMethod pay)
        {
            return base.Channel.updatePaymentMethodAsync(pay);
        }
        
        public System.Threading.Tasks.Task<bool> deletePaymentMethodAsync(int payId)
        {
            return base.Channel.deletePaymentMethodAsync(payId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPaymentMethodService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPaymentMethodService))
            {
                return new System.ServiceModel.EndpointAddress("http://10.107.14.95/IISHosting/EnotsCompany/PaymentMethodService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PaymentMethodServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IPaymentMethodService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PaymentMethodServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IPaymentMethodService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IPaymentMethodService,
        }
    }
}
