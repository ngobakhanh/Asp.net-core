//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference_Unit
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Unit", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.DAL")]
    public partial class Unit : object
    {
        
        private int UnitIdField;
        
        private string UnitNameField;
        
        private string UnitStatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnitId
        {
            get
            {
                return this.UnitIdField;
            }
            set
            {
                this.UnitIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UnitName
        {
            get
            {
                return this.UnitNameField;
            }
            set
            {
                this.UnitNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UnitStatus
        {
            get
            {
                return this.UnitStatusField;
            }
            set
            {
                this.UnitStatusField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyFaultException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.My_Excepti" +
        "on")]
    public partial class MyFaultException : object
    {
        
        private string errorCodeField;
        
        private string messageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string errorCode
        {
            get
            {
                return this.errorCodeField;
            }
            set
            {
                this.errorCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message
        {
            get
            {
                return this.messageField;
            }
            set
            {
                this.messageField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference_Unit.IUnitService")]
    public interface IUnitService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitService/getAllUnit", ReplyAction="http://tempuri.org/IUnitService/getAllUnitResponse")]
        System.Threading.Tasks.Task<ServiceReference_Unit.Unit[]> getAllUnitAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitService/findUnitById", ReplyAction="http://tempuri.org/IUnitService/findUnitByIdResponse")]
        System.Threading.Tasks.Task<ServiceReference_Unit.Unit> findUnitByIdAsync(int unitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitService/createUnit", ReplyAction="http://tempuri.org/IUnitService/createUnitResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference_Unit.MyFaultException), Action="http://tempuri.org/IUnitService/createUnitMyFaultExceptionFault", Name="MyFaultException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.My_Excepti" +
            "on")]
        System.Threading.Tasks.Task<bool> createUnitAsync(ServiceReference_Unit.Unit unit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitService/updateUnit", ReplyAction="http://tempuri.org/IUnitService/updateUnitResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference_Unit.MyFaultException), Action="http://tempuri.org/IUnitService/updateUnitMyFaultExceptionFault", Name="MyFaultException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.My_Excepti" +
            "on")]
        System.Threading.Tasks.Task<bool> updateUnitAsync(ServiceReference_Unit.Unit unit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitService/deleteUnit", ReplyAction="http://tempuri.org/IUnitService/deleteUnitResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference_Unit.MyFaultException), Action="http://tempuri.org/IUnitService/deleteUnitMyFaultExceptionFault", Name="MyFaultException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.My_Excepti" +
            "on")]
        System.Threading.Tasks.Task<bool> deleteUnitAsync(int unitId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public interface IUnitServiceChannel : ServiceReference_Unit.IUnitService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public partial class UnitServiceClient : System.ServiceModel.ClientBase<ServiceReference_Unit.IUnitService>, ServiceReference_Unit.IUnitService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public UnitServiceClient() : 
                base(UnitServiceClient.GetDefaultBinding(), UnitServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IUnitService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UnitServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(UnitServiceClient.GetBindingForEndpoint(endpointConfiguration), UnitServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UnitServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(UnitServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UnitServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(UnitServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UnitServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference_Unit.Unit[]> getAllUnitAsync()
        {
            return base.Channel.getAllUnitAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReference_Unit.Unit> findUnitByIdAsync(int unitId)
        {
            return base.Channel.findUnitByIdAsync(unitId);
        }
        
        public System.Threading.Tasks.Task<bool> createUnitAsync(ServiceReference_Unit.Unit unit)
        {
            return base.Channel.createUnitAsync(unit);
        }
        
        public System.Threading.Tasks.Task<bool> updateUnitAsync(ServiceReference_Unit.Unit unit)
        {
            return base.Channel.updateUnitAsync(unit);
        }
        
        public System.Threading.Tasks.Task<bool> deleteUnitAsync(int unitId)
        {
            return base.Channel.deleteUnitAsync(unitId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IUnitService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IUnitService))
            {
                return new System.ServiceModel.EndpointAddress("http://10.107.14.95/IISHosting/EnotsCompany/UnitService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return UnitServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IUnitService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return UnitServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IUnitService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IUnitService,
        }
    }
}
