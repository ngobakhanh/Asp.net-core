//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference_Employee
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.DAL")]
    public partial class Employee : object
    {
        
        private string AddressEmpField;
        
        private string EmailField;
        
        private int EmployeeIdField;
        
        private string FullnameField;
        
        private string PhoneField;
        
        private string StatusEmpField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AddressEmp
        {
            get
            {
                return this.AddressEmpField;
            }
            set
            {
                this.AddressEmpField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email
        {
            get
            {
                return this.EmailField;
            }
            set
            {
                this.EmailField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmployeeId
        {
            get
            {
                return this.EmployeeIdField;
            }
            set
            {
                this.EmployeeIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fullname
        {
            get
            {
                return this.FullnameField;
            }
            set
            {
                this.FullnameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone
        {
            get
            {
                return this.PhoneField;
            }
            set
            {
                this.PhoneField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusEmp
        {
            get
            {
                return this.StatusEmpField;
            }
            set
            {
                this.StatusEmpField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyFaultException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.My_Excepti" +
        "on")]
    public partial class MyFaultException : object
    {
        
        private string errorCodeField;
        
        private string messageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string errorCode
        {
            get
            {
                return this.errorCodeField;
            }
            set
            {
                this.errorCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message
        {
            get
            {
                return this.messageField;
            }
            set
            {
                this.messageField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference_Employee.IEmployeeService")]
    public interface IEmployeeService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/getAllEmployee", ReplyAction="http://tempuri.org/IEmployeeService/getAllEmployeeResponse")]
        System.Threading.Tasks.Task<ServiceReference_Employee.Employee[]> getAllEmployeeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/findEmployeebyId", ReplyAction="http://tempuri.org/IEmployeeService/findEmployeebyIdResponse")]
        System.Threading.Tasks.Task<ServiceReference_Employee.Employee> findEmployeebyIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/findEmployeebyName", ReplyAction="http://tempuri.org/IEmployeeService/findEmployeebyNameResponse")]
        System.Threading.Tasks.Task<ServiceReference_Employee.Employee[]> findEmployeebyNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/createEmployee", ReplyAction="http://tempuri.org/IEmployeeService/createEmployeeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference_Employee.MyFaultException), Action="http://tempuri.org/IEmployeeService/createEmployeeMyFaultExceptionFault", Name="MyFaultException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.My_Excepti" +
            "on")]
        System.Threading.Tasks.Task<bool> createEmployeeAsync(ServiceReference_Employee.Employee e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/updateEmployee", ReplyAction="http://tempuri.org/IEmployeeService/updateEmployeeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference_Employee.MyFaultException), Action="http://tempuri.org/IEmployeeService/updateEmployeeMyFaultExceptionFault", Name="MyFaultException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.My_Excepti" +
            "on")]
        System.Threading.Tasks.Task<bool> updateEmployeeAsync(ServiceReference_Employee.Employee e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/deleteEmployee", ReplyAction="http://tempuri.org/IEmployeeService/deleteEmployeeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference_Employee.MyFaultException), Action="http://tempuri.org/IEmployeeService/deleteEmployeeMyFaultExceptionFault", Name="MyFaultException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary_EnotsCompany.My_Excepti" +
            "on")]
        System.Threading.Tasks.Task<bool> deleteEmployeeAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public interface IEmployeeServiceChannel : ServiceReference_Employee.IEmployeeService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public partial class EmployeeServiceClient : System.ServiceModel.ClientBase<ServiceReference_Employee.IEmployeeService>, ServiceReference_Employee.IEmployeeService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public EmployeeServiceClient() : 
                base(EmployeeServiceClient.GetDefaultBinding(), EmployeeServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IEmployeeService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EmployeeServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(EmployeeServiceClient.GetBindingForEndpoint(endpointConfiguration), EmployeeServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EmployeeServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(EmployeeServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EmployeeServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(EmployeeServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EmployeeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference_Employee.Employee[]> getAllEmployeeAsync()
        {
            return base.Channel.getAllEmployeeAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReference_Employee.Employee> findEmployeebyIdAsync(int id)
        {
            return base.Channel.findEmployeebyIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<ServiceReference_Employee.Employee[]> findEmployeebyNameAsync(string name)
        {
            return base.Channel.findEmployeebyNameAsync(name);
        }
        
        public System.Threading.Tasks.Task<bool> createEmployeeAsync(ServiceReference_Employee.Employee e)
        {
            return base.Channel.createEmployeeAsync(e);
        }
        
        public System.Threading.Tasks.Task<bool> updateEmployeeAsync(ServiceReference_Employee.Employee e)
        {
            return base.Channel.updateEmployeeAsync(e);
        }
        
        public System.Threading.Tasks.Task<bool> deleteEmployeeAsync(int id)
        {
            return base.Channel.deleteEmployeeAsync(id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IEmployeeService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IEmployeeService))
            {
                return new System.ServiceModel.EndpointAddress("http://10.107.14.95/IISHosting/EnotsCompany/EmployeeService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return EmployeeServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IEmployeeService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return EmployeeServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IEmployeeService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IEmployeeService,
        }
    }
}
